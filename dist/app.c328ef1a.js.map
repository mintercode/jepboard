{"version":3,"sources":["app.js"],"names":["TriviaGameShow","element","options","useCategoryIds","categories","clues","currentClue","score","boardElement","querySelector","scoreCountElement","formElement","inputElement","modalElement","clueTextElement","resultElement","resultTextElement","successTextElement","failTextElement","addEventListener","event","target","dataset","clueId","handleClueClick","handleFormSubmit","updateScore","fetchCategories","map","category_id","Promise","resolve","reject","fetch","then","response","json","data","all","results","forEach","result","categoryIndex","category","title","shuffle","splice","clue","index","console","log","push","question","answer","value","c","renderCategory","column","document","createElement","classList","add","innerHTML","trim","ul","appendChild","change","textContent","remove","focus","preventDefault","isCorrect","cleanseAnswer","revealAnswer","input","friendlyAnswer","toLowerCase","replace","style","display","setTimeout","a","j","x","i","length","Math","floor","random","game","initGame","Footer"],"mappings":"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","file":"app.c328ef1a.js","sourceRoot":"..","sourcesContent":["class TriviaGameShow {\n    constructor(element, options={}) {\n       \n       //Which categories we should use (or use default is nothing provided)\n       this.useCategoryIds = options.useCategoryIds || [ 1892, 4483, 88, 218]; \n       /*\n          Default Categories pulled from https://jservice.io/search:\n          ---\n          1892: Video Games\n          4483: Three Letter Animals\n          88: Geography\n          218: Science and Nature\n       */      \n \n       //Database\n       this.categories = [];\n       this.clues = {};\n       \n       //State\n       this.currentClue = null;\n       this.score = 0;\n       \n       //Elements\n       this.boardElement = element.querySelector(\".board\");\n       this.scoreCountElement = element.querySelector(\".score-count\");\n       this.formElement = element.querySelector(\"form\");\n       this.inputElement = element.querySelector(\"input[name=user-answer]\");\n       this.modalElement = element.querySelector(\".card-modal\");\n       this.clueTextElement = element.querySelector(\".clue-text\");\n       this.resultElement = element.querySelector(\".result\");\n       this.resultTextElement = element.querySelector(\".result_correct-answer-text\");\n       this.successTextElement = element.querySelector(\".result_success\");\n       this.failTextElement = element.querySelector(\".result_fail\");\n    }\n \n    initGame() {\n       //Bind event handlers\n       this.boardElement.addEventListener(\"click\", event => {\n          if (event.target.dataset.clueId) {\n             this.handleClueClick(event);\n          }\n       });\n       this.formElement.addEventListener(\"submit\", event => {\n          this.handleFormSubmit(event);\n       });\n       \n       //Render initial state of score\n       this.updateScore(0);\n       \n       //Kick off the category fetch\n       this.fetchCategories();\n    }\n    \n \n    fetchCategories() {      \n       //Fetch all of the data from the API\n       const categories = this.useCategoryIds.map(category_id => {\n          return new Promise((resolve, reject) => {\n             fetch(`https://jservice.io/api/category?id=${category_id}`)\n                .then(response => response.json()).then(data => {\n                   resolve(data);\n                });\n          });\n       });\n       \n       //Sift through the data when all categories come back\n       Promise.all(categories).then(results => {\n          \n          //Build up our list of categories\n          results.forEach((result, categoryIndex) => {\n             \n             //Start with a blank category\n             var category = {\n                title: result.title,\n                clues: []\n             }\n             \n             //Add every clue within a category to our database of clues\n             var clues = shuffle(result.clues).splice(0,5).forEach((clue, index) => {\n                console.log(clue)\n                \n                //Create unique ID for this clue\n                var clueId = categoryIndex + \"-\" + index;\n                category.clues.push(clueId);\n                \n                //Add clue to DB\n                this.clues[clueId] = {\n                   question: clue.question,\n                   answer: clue.answer,\n                   value: (index + 1) * 100\n                };\n             })\n             \n             //Add this category to our DB of categories\n             this.categories.push(category);\n          });\n          \n          //Render each category to the DOM\n          this.categories.forEach((c) => {\n             this.renderCategory(c);\n          });\n       });\n    }\n \n    renderCategory(category) {      \n       let column = document.createElement(\"div\");\n       column.classList.add(\"column\");\n       column.innerHTML = (\n          `<header>${category.title}</header>\n          <ul>\n          </ul>`\n       ).trim();\n       \n       var ul = column.querySelector(\"ul\");\n       category.clues.forEach(clueId => {\n          var clue = this.clues[clueId];\n          ul.innerHTML += `<li><button data-clue-id=${clueId}>${clue.value}</button></li>`\n       })\n       \n       //Add to DOM\n       this.boardElement.appendChild(column);\n    }\n \n    updateScore(change) {\n       this.score += change;\n       this.scoreCountElement.textContent = this.score;\n    }\n \n    handleClueClick(event) {\n       var clue = this.clues[event.target.dataset.clueId];\n \n       //Mark this button as used\n       event.target.classList.add(\"used\");\n       \n       //Clear out the input field\n       this.inputElement.value = \"\";\n       \n       //Update current clue\n       this.currentClue = clue;\n \n       //Update the text\n       this.clueTextElement.textContent = this.currentClue.question;\n       this.resultTextElement.textContent = this.currentClue.answer;\n \n       //Hide the result\n       this.modalElement.classList.remove(\"showing-result\");\n       \n       //Show the modal\n       this.modalElement.classList.add(\"visible\");\n       this.inputElement.focus();\n    }\n \n    //Handle an answer from user\n    handleFormSubmit(event) {\n       event.preventDefault();\n       \n       var isCorrect = this.cleanseAnswer(this.inputElement.value) === this.cleanseAnswer(this.currentClue.answer);\n       if (isCorrect) {\n          this.updateScore(this.currentClue.value);\n       }\n       \n       //Show answer\n       this.revealAnswer(isCorrect);\n    }\n    \n    //Standardize an answer string so we can compare and accept variations\n    cleanseAnswer(input=\"\") {\n       var friendlyAnswer = input.toLowerCase();\n       friendlyAnswer = friendlyAnswer.replace(\"<i>\", \"\");\n       friendlyAnswer = friendlyAnswer.replace(\"</i>\", \"\");\n       friendlyAnswer = friendlyAnswer.replace(/ /g, \"\");\n       friendlyAnswer = friendlyAnswer.replace(/\"/g, \"\");\n       friendlyAnswer = friendlyAnswer.replace(/^a /, \"\");\n       friendlyAnswer = friendlyAnswer.replace(/^an /, \"\");      \n       return friendlyAnswer.trim();\n    }\n    \n    \n    revealAnswer(isCorrect) {\n       \n       //Show the individual success/fail case\n       this.successTextElement.style.display = isCorrect ? \"block\" : \"none\";\n       this.failTextElement.style.display = !isCorrect ? \"block\" : \"none\";\n       \n       //Show the whole result container\n       this.modalElement.classList.add(\"showing-result\");\n       \n       //Disappear after a short bit\n       setTimeout(() => {\n          this.modalElement.classList.remove(\"visible\");\n       }, 3000);\n    }\n    \n }\n \n \n \n //Utils -----------------------------------\n /**https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array\n  * Shuffles array in place.\n  * @param {Array} a items An array containing the items.\n  */\n function shuffle(a) {\n     var j, x, i;\n     for (i = a.length - 1; i > 0; i--) {\n         j = Math.floor(Math.random() * (i + 1));\n         x = a[i];\n         a[i] = a[j];\n         a[j] = x;\n     }\n     return a;\n } //https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array\n \n //-------------------------------------------\n \n const game = new TriviaGameShow( document.querySelector(\".app\"), {});\n game.initGame();\n \nFooter\n\n"]}